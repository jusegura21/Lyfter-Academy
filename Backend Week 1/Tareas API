from flask import Flask
from flask import request,jsonify
import json
import os


app = Flask(__name__)

#tasks_list = [
#	{
#		"id": "01",
#		"title": "API",
#       "description": "Create an API",
#       "status": "Not started",
#	}
#]
DATA_FILE = "tasks.json"
ALLOWED_STATUS={"to do", "in progress", "completed"}

def load_task_list(file_path):
    try:
        if not os.path.exists(file_path):
            return [] 
        
        if os.path.getsize(file_path) == 0:
            return []
        
        with open(file_path, 'r') as f:
            data = json.load(f)
            return data if data else []
            
    except Exception as ex:
        print(f"Error loading tasks: {ex}")
        return []

def save_task_list(file_path,data):
    try:
        with open (file_path,'w') as file:
            json.dump(data,file, indent=4)
        return True
    except Exception as ex:
        print(f"Error saving data:{ex}")
        return False

def register_new_task():
    tasks_list=load_task_list(DATA_FILE)
    try:
        if "id" not in request.json:
            raise ValueError("ID missing from the body")
        if "title" not in request.json:
            raise ValueError("Title missing from the body")
        if "description" not in request.json:
            raise ValueError("Description missing from the body")
        if "status" not in request.json:
            raise ValueError("Status missing from the body")
        status=request.json.get("status")
        if status not in ALLOWED_STATUS:
            raise ValueError(f"status not allowed. Status must be{ALLOWED_STATUS}")
        for t in tasks_list:
            if t["id"]==request.json['id']:
                return jsonify(message="id already exists"), 400
        tasks_list.append(
        {
            "id": request.json["id"],
            "title": request.json["title"],
            "description": request.json["description"],
            "status": status,
        }
        )
        save_task_list(DATA_FILE,tasks_list)

        return jsonify(message="Task created successfully", data=tasks_list), 201
    except ValueError as ex:
        return jsonify(message=str(ex)),400
    except Exception as ex:
        return jsonify(message=str(ex)), 500

def delete_task(id):
    tasks_list=load_task_list(DATA_FILE)
    try:
        for t in tasks_list:
            if t["id"] == id :
                tasks_list.remove(t)
                save_task_list(DATA_FILE,tasks_list)
                return jsonify(message="Task deleted successfully"), 200
        return jsonify(message="Task not found"), 404   
    except Exception as ex:
        return jsonify(message=str(ex)), 500

        
@app.route("/tasks/edit/<task_id>", methods=["PATCH"])
def edit_tasks(task_id):
    tasks_list=load_task_list(DATA_FILE)
    try:
        title_filter=request.json.get("title")
        description_filter=request.json.get("description")
        status_filter=request.json.get("status")
        if status_filter and status_filter not in ALLOWED_STATUS:
            return jsonify(message=f"status not allowed. Status must be {ALLOWED_STATUS}"),400
        for task in tasks_list:
            if task["id"]==task_id:
                task["status"]=status_filter or task["status"]
                task["title"] = title_filter or task["title"]
                task["description"] = description_filter or task["description"]
                save_task_list(DATA_FILE,tasks_list)
                return jsonify(message="Task updated successfully", data=task), 200
        return jsonify(message="Task not found"), 404
    except Exception as ex:
        return jsonify(message=str(ex)), 500          
    
@app.route("/tasks/list",methods=["GET"])   
def show_tasks():
    tasks_list=load_task_list(DATA_FILE)
    try:
        filtered_tasks=tasks_list
        status_filter=request.args.get("status")
        if status_filter:
            filtered_tasks=list(
                filter(lambda show: show["status"]==status_filter,filtered_tasks)
                )
        return jsonify(data=filtered_tasks),200
    except Exception as ex:
        return jsonify(message=str(ex)), 500
    
        
@app.route("/tasks", methods=["POST"])
def add_tasks():
        return register_new_task()

    
@app.route("/tasks/delete/<id>", methods=["DELETE"])
def remove_tasks(id):
        return delete_task(id)
    
    
if __name__ == "__main__":
    app.run(host="localhost", debug=True)